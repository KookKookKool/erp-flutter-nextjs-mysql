import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { AuthService } from '@/lib/auth'
import { DatabaseManager } from '@/lib/database-manager'

async function verifyAdmin(request: NextRequest) {
  const authorization = request.headers.get('authorization')
  if (!authorization || !authorization.startsWith('Bearer ')) {
    return null
  }

  const token = authorization.split(' ')[1]
  const payload = AuthService.verifyToken(token)
  
  if (!payload) {
    return null
  }

  const admin = await prisma.adminUser.findUnique({
    where: { id: payload.adminId }
  })

  return admin?.isActive ? admin : null
}

// GET - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const admin = await verifyAdmin(request)
    if (!admin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const organization = await prisma.organization.findUnique({
      where: { id: params.id },
      include: {
        users: {
          select: {
            id: true,
            email: true,
            name: true,
            role: true,
            isActive: true,
            createdAt: true
          }
        }
      }
    })

    if (!organization) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ô‡∏µ‡πâ' },
        { status: 404 }
      )
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡∏à‡∏≤‡∏Å organization schema
    let users: any[] = []
    if (organization.schemaName) {
      const dbManager = DatabaseManager.getInstance()
      users = await dbManager.getOrganizationUsers(organization.schemaName)
    }

    return NextResponse.json({ 
      organization: {
        ...organization,
        users
      }
    })

  } catch (error) {
    console.error('‚ùå Error fetching organization:', error)
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    )
  }
}

// PATCH - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò)
export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const admin = await verifyAdmin(request)
    if (!admin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { action, subscriptionPlan, subscriptionEnd, orgName, orgEmail, orgPhone, orgAddress, orgDescription, adminName, adminEmail } = body

    const organization = await prisma.organization.findUnique({
      where: { id: params.id }
    })

    if (!organization) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ô‡∏µ‡πâ' },
        { status: 404 }
      )
    }

    let updateData: any = {}
    let auditAction = ''
    let dbManager: DatabaseManager | null = null

    switch (action) {
      case 'approve':
        if (organization.status !== 'PENDING') {
          return NextResponse.json(
            { error: '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' },
            { status: 400 }
          )
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Database Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
        dbManager = DatabaseManager.getInstance()
        const schemaName = await dbManager.createOrganizationSchema(organization.orgCode)
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Super Admin User ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const adminCredentials = await dbManager.createInitialAdminUser(schemaName, {
          email: organization.adminEmail, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
          name: organization.adminName,   // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
          orgCode: organization.orgCode   // ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• admin_‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
        })
        
        console.log(`üìß Super Admin credentials for ${organization.orgCode}:`, adminCredentials)
        console.log(`üîë Login URL: http://localhost:3000/admin/login`)
        console.log(`üìß Email: ${adminCredentials.email}`)
        console.log(`üîê Password: ${adminCredentials.password}`)

        updateData = {
          status: 'APPROVED',
          isActive: true,
          approvedAt: new Date(),
          approvedBy: admin.id,
          schemaName,
          subscriptionPlan: subscriptionPlan || 'BASIC',
          subscriptionStart: new Date(),
          subscriptionEnd: subscriptionEnd ? new Date(subscriptionEnd) : new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 ‡∏õ‡∏µ
        }
        auditAction = 'APPROVE_ORGANIZATION'
        break

      case 'reject':
        updateData = {
          status: 'REJECTED',
          isActive: false
        }
        auditAction = 'REJECT_ORGANIZATION'
        break

      case 'suspend':
        updateData = {
          status: 'SUSPENDED',
          isActive: false
        }
        auditAction = 'SUSPEND_ORGANIZATION'
        break

      case 'reactivate':
        // Handle reactivation for different statuses
        if (organization.status === 'SUSPENDED') {
          updateData = {
            status: 'APPROVED',
            isActive: true
          }
        } else if (organization.status === 'REJECTED') {
          // Re-approve rejected organization
          dbManager = DatabaseManager.getInstance()
          const schemaName = await dbManager.createOrganizationSchema(organization.orgCode)
          
          updateData = {
            status: 'APPROVED',
            isActive: true,
            approvedAt: new Date(),
            approvedBy: admin.id,
            schemaName,
            subscriptionPlan: subscriptionPlan || 'BASIC',
            subscriptionStart: new Date(),
            subscriptionEnd: subscriptionEnd ? new Date(subscriptionEnd) : new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
          }
        } else if (organization.status === 'EXPIRED') {
          updateData = {
            status: 'APPROVED',
            isActive: true,
            subscriptionEnd: subscriptionEnd ? new Date(subscriptionEnd) : new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
          }
        }
        auditAction = 'REACTIVATE_ORGANIZATION'
        break

      case 'delete':
        // Delete organization and its schema if exists
        if (organization.schemaName) {
          try {
            dbManager = DatabaseManager.getInstance()
            await dbManager.deleteOrganizationSchema(organization.schemaName)
          } catch (error) {
            console.warn('Warning: Could not drop schema:', error)
          }
        }

        // Delete the organization record
        await prisma.organization.delete({
          where: { id: params.id }
        })

        // Log the deletion
        await prisma.adminAuditLog.create({
          data: {
            adminId: admin.id,
            action: 'DELETE_ORGANIZATION',
            target: params.id,
            details: {
              orgCode: organization.orgCode,
              orgName: organization.orgName,
              schemaName: organization.schemaName
            },
            ipAddress: request.headers.get('x-forwarded-for') || 'unknown',
            userAgent: request.headers.get('user-agent') || 'unknown'
          }
        })

        return NextResponse.json({
          success: true,
          message: '‡∏•‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
        })

      case 'extend':
        if (!subscriptionEnd) {
          return NextResponse.json(
            { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡∏°‡πà' },
            { status: 400 }
          )
        }

        updateData = {
          subscriptionEnd: new Date(subscriptionEnd),
          isActive: true,
          status: 'APPROVED'
        }
        auditAction = 'EXTEND_SUBSCRIPTION'
        break

      case 'reactivate':
        updateData = {
          status: 'APPROVED',
          isActive: true
        }
        auditAction = 'REACTIVATE_ORGANIZATION'
        break

      case 'update':
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
        updateData = {}
        
        if (orgName !== undefined) updateData.orgName = orgName
        if (orgEmail !== undefined) updateData.orgEmail = orgEmail
        if (orgPhone !== undefined) updateData.orgPhone = orgPhone
        if (orgAddress !== undefined) updateData.orgAddress = orgAddress
        if (orgDescription !== undefined) updateData.orgDescription = orgDescription
        if (adminName !== undefined) updateData.adminName = adminName
        if (adminEmail !== undefined) updateData.adminEmail = adminEmail

        auditAction = 'UPDATE_ORGANIZATION'
        break

      default:
        return NextResponse.json(
          { error: 'Action ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
          { status: 400 }
        )
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
    const updatedOrganization = await prisma.organization.update({
      where: { id: params.id },
      data: updateData
    })

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Audit Log
    await prisma.adminAuditLog.create({
      data: {
        adminId: admin.id,
        action: auditAction,
        target: params.id,
        details: {
          orgCode: organization.orgCode,
          orgName: organization.orgName,
          previousStatus: organization.status,
          newStatus: updateData.status
        },
        ipAddress: request.headers.get('x-forwarded-for') || 'unknown',
        userAgent: request.headers.get('user-agent') || 'unknown'
      }
    })

    console.log(`‚úÖ Organization ${organization.orgCode} ${action}ed by ${admin.email}`)

    return NextResponse.json({
      success: true,
      message: `${
        action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : 
        action === 'reject' ? '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò' : 
        action === 'suspend' ? '‡∏£‡∏∞‡∏á‡∏±‡∏ö' : 
        action === 'extend' ? '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏' :
        action === 'update' ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' :
        action === 'reactivate' ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' :
        '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'
      }‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      organization: updatedOrganization
    })

  } catch (error) {
    console.error('‚ùå Error updating organization:', error)
    
    // ‡∏™‡πà‡∏á error message ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤
    let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    
    if (error instanceof Error) {
      if (error.message.includes('Access denied')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Database Schema ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Database'
      } else if (error.message.includes('Connection')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
      } else {
        errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
      }
    }
    
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    )
  }
}

// DELETE - ‡∏•‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const admin = await verifyAdmin(request)
    if (!admin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const organization = await prisma.organization.findUnique({
      where: { id: params.id }
    })

    if (!organization) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ô‡∏µ‡πâ' },
        { status: 404 }
      )
    }

    // ‡∏•‡∏ö Database Schema ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (organization.schemaName) {
      const dbManager = DatabaseManager.getInstance()
      await dbManager.deleteOrganizationSchema(organization.schemaName)
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
    await prisma.organization.delete({
      where: { id: params.id }
    })

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Audit Log
    await prisma.adminAuditLog.create({
      data: {
        adminId: admin.id,
        action: 'DELETE_ORGANIZATION',
        target: params.id,
        details: {
          orgCode: organization.orgCode,
          orgName: organization.orgName,
          schemaName: organization.schemaName
        },
        ipAddress: request.headers.get('x-forwarded-for') || 'unknown',
        userAgent: request.headers.get('user-agent') || 'unknown'
      }
    })

    console.log(`üóëÔ∏è Organization ${organization.orgCode} deleted by ${admin.email}`)

    return NextResponse.json({
      success: true,
      message: '‡∏•‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
    })

  } catch (error) {
    console.error('‚ùå Error deleting organization:', error)
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    )
  }
}
